{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JYD005/DSN_FREE/blob/main/free.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **import libraries**"
      ],
      "metadata": {
        "id": "JfwOXwX8XKIc"
      },
      "id": "JfwOXwX8XKIc"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e746b2af",
      "metadata": {
        "id": "e746b2af"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3129d777",
      "metadata": {
        "id": "3129d777"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "#from statsmodels.graphics.gofplots import qqplot\n",
        "#import scipy"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **read datasets**"
      ],
      "metadata": {
        "id": "O-Fx13ExX2wH"
      },
      "id": "O-Fx13ExX2wH"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2c497513",
      "metadata": {
        "id": "2c497513"
      },
      "outputs": [],
      "source": [
        "train_df = pd.read_csv('train.csv')\n",
        "test_df = pd.read_csv('test.csv')\n",
        "ss_df = pd.read_csv('SampleSubmission.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **perform some EDA**"
      ],
      "metadata": {
        "id": "s8s7qKsBYPBh"
      },
      "id": "s8s7qKsBYPBh"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d69cc186",
      "metadata": {
        "id": "d69cc186",
        "outputId": "6327eca9-47b0-452c-fafe-7102dae3f11c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(4990, 13)"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0c6eb6b0",
      "metadata": {
        "id": "0c6eb6b0",
        "outputId": "bd8b80c2-2ef2-404c-befe-307fd9b1fe79"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(3532, 12)"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b6d38def",
      "metadata": {
        "id": "b6d38def",
        "outputId": "f65ac329-610c-4df2-fe7e-d8ed6c740f46"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4990 entries, 0 to 4989\n",
            "Data columns (total 13 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   Item_ID              4990 non-null   object \n",
            " 1   Store_ID             4990 non-null   object \n",
            " 2   Item_Store_ID        4990 non-null   object \n",
            " 3   Item_Weight          4990 non-null   float64\n",
            " 4   Item_Sugar_Content   4990 non-null   object \n",
            " 5   Item_Visibility      4990 non-null   float64\n",
            " 6   Item_Type            4990 non-null   object \n",
            " 7   Item_Price           4990 non-null   float64\n",
            " 8   Store_Start_Year     4990 non-null   int64  \n",
            " 9   Store_Size           4990 non-null   object \n",
            " 10  Store_Location_Type  4990 non-null   object \n",
            " 11  Store_Type           4990 non-null   object \n",
            " 12  Item_Store_Returns   4990 non-null   float64\n",
            "dtypes: float64(4), int64(1), object(8)\n",
            "memory usage: 506.9+ KB\n"
          ]
        }
      ],
      "source": [
        "train_df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "993c1415",
      "metadata": {
        "id": "993c1415",
        "outputId": "f49b49f9-ad32-4cec-d469-cec6cfa7a832"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3532 entries, 0 to 3531\n",
            "Data columns (total 12 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   Item_ID              3532 non-null   object \n",
            " 1   Store_ID             3532 non-null   object \n",
            " 2   Item_Store_ID        3532 non-null   object \n",
            " 3   Item_Weight          3532 non-null   float64\n",
            " 4   Item_Sugar_Content   3532 non-null   object \n",
            " 5   Item_Visibility      3532 non-null   float64\n",
            " 6   Item_Type            3532 non-null   object \n",
            " 7   Item_Price           3532 non-null   float64\n",
            " 8   Store_Start_Year     3532 non-null   int64  \n",
            " 9   Store_Size           3532 non-null   object \n",
            " 10  Store_Location_Type  3532 non-null   object \n",
            " 11  Store_Type           3532 non-null   object \n",
            "dtypes: float64(3), int64(1), object(8)\n",
            "memory usage: 331.3+ KB\n"
          ]
        }
      ],
      "source": [
        "test_df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d8d72ea2",
      "metadata": {
        "id": "d8d72ea2",
        "outputId": "3fa9141e-eaa1-4bcf-a417-979d2caeef0d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_ID</th>\n",
              "      <th>Store_ID</th>\n",
              "      <th>Item_Store_ID</th>\n",
              "      <th>Item_Weight</th>\n",
              "      <th>Item_Sugar_Content</th>\n",
              "      <th>Item_Visibility</th>\n",
              "      <th>Item_Type</th>\n",
              "      <th>Item_Price</th>\n",
              "      <th>Store_Start_Year</th>\n",
              "      <th>Store_Size</th>\n",
              "      <th>Store_Location_Type</th>\n",
              "      <th>Store_Type</th>\n",
              "      <th>Item_Store_Returns</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4985</th>\n",
              "      <td>NCZ54</td>\n",
              "      <td>BABATUNJI019</td>\n",
              "      <td>NCZ54_BABATUNJI019</td>\n",
              "      <td>12.60</td>\n",
              "      <td>Low Sugar</td>\n",
              "      <td>0.145952</td>\n",
              "      <td>Household</td>\n",
              "      <td>402.39</td>\n",
              "      <td>1992</td>\n",
              "      <td>Small</td>\n",
              "      <td>Cluster 1</td>\n",
              "      <td>Grocery Store</td>\n",
              "      <td>406.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4986</th>\n",
              "      <td>NCZ54</td>\n",
              "      <td>BABATUNJI027</td>\n",
              "      <td>NCZ54_BABATUNJI027</td>\n",
              "      <td>12.60</td>\n",
              "      <td>Low Sugar</td>\n",
              "      <td>0.082956</td>\n",
              "      <td>Household</td>\n",
              "      <td>410.14</td>\n",
              "      <td>1992</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Cluster 3</td>\n",
              "      <td>Supermarket Type3</td>\n",
              "      <td>13808.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4987</th>\n",
              "      <td>NCZ54</td>\n",
              "      <td>BABATUNJI045</td>\n",
              "      <td>NCZ54_BABATUNJI045</td>\n",
              "      <td>14.65</td>\n",
              "      <td>Low Sugar</td>\n",
              "      <td>0.083528</td>\n",
              "      <td>Household</td>\n",
              "      <td>406.14</td>\n",
              "      <td>2009</td>\n",
              "      <td>Small</td>\n",
              "      <td>Cluster 2</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>5685.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4988</th>\n",
              "      <td>NCZ54</td>\n",
              "      <td>BABATUNJI046</td>\n",
              "      <td>NCZ54_BABATUNJI046</td>\n",
              "      <td>14.65</td>\n",
              "      <td>Low Sugar</td>\n",
              "      <td>0.083359</td>\n",
              "      <td>Household</td>\n",
              "      <td>404.89</td>\n",
              "      <td>2004</td>\n",
              "      <td>Small</td>\n",
              "      <td>Cluster 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>11778.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4989</th>\n",
              "      <td>NCZ54</td>\n",
              "      <td>BABATUNJI049</td>\n",
              "      <td>NCZ54_BABATUNJI049</td>\n",
              "      <td>14.65</td>\n",
              "      <td>Low Sugar</td>\n",
              "      <td>0.083489</td>\n",
              "      <td>Household</td>\n",
              "      <td>403.39</td>\n",
              "      <td>2006</td>\n",
              "      <td>Medium</td>\n",
              "      <td>Cluster 1</td>\n",
              "      <td>Supermarket Type1</td>\n",
              "      <td>17870.07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Item_ID      Store_ID       Item_Store_ID  Item_Weight  \\\n",
              "4985   NCZ54  BABATUNJI019  NCZ54_BABATUNJI019        12.60   \n",
              "4986   NCZ54  BABATUNJI027  NCZ54_BABATUNJI027        12.60   \n",
              "4987   NCZ54  BABATUNJI045  NCZ54_BABATUNJI045        14.65   \n",
              "4988   NCZ54  BABATUNJI046  NCZ54_BABATUNJI046        14.65   \n",
              "4989   NCZ54  BABATUNJI049  NCZ54_BABATUNJI049        14.65   \n",
              "\n",
              "     Item_Sugar_Content  Item_Visibility  Item_Type  Item_Price  \\\n",
              "4985          Low Sugar         0.145952  Household      402.39   \n",
              "4986          Low Sugar         0.082956  Household      410.14   \n",
              "4987          Low Sugar         0.083528  Household      406.14   \n",
              "4988          Low Sugar         0.083359  Household      404.89   \n",
              "4989          Low Sugar         0.083489  Household      403.39   \n",
              "\n",
              "      Store_Start_Year Store_Size Store_Location_Type         Store_Type  \\\n",
              "4985              1992      Small           Cluster 1      Grocery Store   \n",
              "4986              1992     Medium           Cluster 3  Supermarket Type3   \n",
              "4987              2009      Small           Cluster 2  Supermarket Type1   \n",
              "4988              2004      Small           Cluster 1  Supermarket Type1   \n",
              "4989              2006     Medium           Cluster 1  Supermarket Type1   \n",
              "\n",
              "      Item_Store_Returns  \n",
              "4985              406.14  \n",
              "4986            13808.69  \n",
              "4987             5685.93  \n",
              "4988            11778.00  \n",
              "4989            17870.07  "
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b5eff0f2",
      "metadata": {
        "id": "b5eff0f2"
      },
      "outputs": [],
      "source": [
        "df = train_df.drop_duplicates(subset=['Item_Store_ID'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9364aca6",
      "metadata": {
        "id": "9364aca6",
        "outputId": "4970ccaf-ef5a-4da0-ff04-5c24b6cedeb2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(4990, 13)"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "22f42ac6",
      "metadata": {
        "id": "22f42ac6",
        "outputId": "dcd64cf7-1c56-4535-d91d-3976661410ae"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Item_Weight</th>\n",
              "      <td>4188.0</td>\n",
              "      <td>12.908838</td>\n",
              "      <td>4.703256</td>\n",
              "      <td>4.555</td>\n",
              "      <td>8.767500</td>\n",
              "      <td>12.600000</td>\n",
              "      <td>17.100000</td>\n",
              "      <td>21.350000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Visibility</th>\n",
              "      <td>4990.0</td>\n",
              "      <td>0.066916</td>\n",
              "      <td>0.053058</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.027273</td>\n",
              "      <td>0.053564</td>\n",
              "      <td>0.095358</td>\n",
              "      <td>0.328391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Price</th>\n",
              "      <td>4990.0</td>\n",
              "      <td>391.803796</td>\n",
              "      <td>119.378259</td>\n",
              "      <td>78.730</td>\n",
              "      <td>307.890000</td>\n",
              "      <td>393.860000</td>\n",
              "      <td>465.067500</td>\n",
              "      <td>667.220000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Store_Start_Year</th>\n",
              "      <td>4990.0</td>\n",
              "      <td>2004.783567</td>\n",
              "      <td>8.283151</td>\n",
              "      <td>1992.000</td>\n",
              "      <td>1994.000000</td>\n",
              "      <td>2006.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2016.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Store_Returns</th>\n",
              "      <td>4990.0</td>\n",
              "      <td>6103.520164</td>\n",
              "      <td>4447.333835</td>\n",
              "      <td>83.230</td>\n",
              "      <td>2757.660000</td>\n",
              "      <td>5374.675000</td>\n",
              "      <td>8522.240000</td>\n",
              "      <td>32717.410000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     count         mean          std       min          25%  \\\n",
              "Item_Weight         4188.0    12.908838     4.703256     4.555     8.767500   \n",
              "Item_Visibility     4990.0     0.066916     0.053058     0.000     0.027273   \n",
              "Item_Price          4990.0   391.803796   119.378259    78.730   307.890000   \n",
              "Store_Start_Year    4990.0  2004.783567     8.283151  1992.000  1994.000000   \n",
              "Item_Store_Returns  4990.0  6103.520164  4447.333835    83.230  2757.660000   \n",
              "\n",
              "                            50%          75%           max  \n",
              "Item_Weight           12.600000    17.100000     21.350000  \n",
              "Item_Visibility        0.053564     0.095358      0.328391  \n",
              "Item_Price           393.860000   465.067500    667.220000  \n",
              "Store_Start_Year    2006.000000  2011.000000   2016.000000  \n",
              "Item_Store_Returns  5374.675000  8522.240000  32717.410000  "
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.describe().T"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "99e8fbee",
      "metadata": {
        "id": "99e8fbee",
        "outputId": "1899471f-aaba-48fd-b890-d049862c8784"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Item_Weight</th>\n",
              "      <td>2871.0</td>\n",
              "      <td>12.781665</td>\n",
              "      <td>4.554868</td>\n",
              "      <td>4.555</td>\n",
              "      <td>8.840000</td>\n",
              "      <td>12.600000</td>\n",
              "      <td>16.600000</td>\n",
              "      <td>21.350000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Visibility</th>\n",
              "      <td>3532.0</td>\n",
              "      <td>0.065030</td>\n",
              "      <td>0.049454</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.026811</td>\n",
              "      <td>0.054444</td>\n",
              "      <td>0.094049</td>\n",
              "      <td>0.321115</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Item_Price</th>\n",
              "      <td>3532.0</td>\n",
              "      <td>296.903392</td>\n",
              "      <td>181.897221</td>\n",
              "      <td>78.230</td>\n",
              "      <td>145.307500</td>\n",
              "      <td>237.770000</td>\n",
              "      <td>461.002500</td>\n",
              "      <td>667.220000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Store_Start_Year</th>\n",
              "      <td>3532.0</td>\n",
              "      <td>2004.900057</td>\n",
              "      <td>8.497250</td>\n",
              "      <td>1992.000</td>\n",
              "      <td>1994.000000</td>\n",
              "      <td>2006.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2016.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                   count         mean         std       min          25%  \\\n",
              "Item_Weight       2871.0    12.781665    4.554868     4.555     8.840000   \n",
              "Item_Visibility   3532.0     0.065030    0.049454     0.000     0.026811   \n",
              "Item_Price        3532.0   296.903392  181.897221    78.230   145.307500   \n",
              "Store_Start_Year  3532.0  2004.900057    8.497250  1992.000  1994.000000   \n",
              "\n",
              "                          50%          75%          max  \n",
              "Item_Weight         12.600000    16.600000    21.350000  \n",
              "Item_Visibility      0.054444     0.094049     0.321115  \n",
              "Item_Price         237.770000   461.002500   667.220000  \n",
              "Store_Start_Year  2006.000000  2011.000000  2016.000000  "
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_df.describe().T"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8eac024d",
      "metadata": {
        "id": "8eac024d",
        "outputId": "bf720658-6b67-48f5-d2e8-a82c8a9ab6fb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Item_Sugar_Content\n",
              "Low Sugar          3039\n",
              "Normal Sugar       1773\n",
              "Ultra Low Sugar     178\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.Item_Sugar_Content.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1a7b62ae",
      "metadata": {
        "id": "1a7b62ae",
        "outputId": "5d62b6c9-656c-4610-e979-5d2ab76eca98"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Item_Type\n",
              "Snack Foods              758\n",
              "Fruits and Vegetables    747\n",
              "Household                567\n",
              "Frozen Foods             457\n",
              "Canned                   376\n",
              "Dairy                    350\n",
              "Baking Goods             344\n",
              "Health and Hygiene       307\n",
              "Meat                     264\n",
              "Soft Drinks              261\n",
              "Breads                   137\n",
              "Hard Drinks              134\n",
              "Others                   100\n",
              "Starchy Foods             81\n",
              "Breakfast                 66\n",
              "Seafood                   41\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.Item_Type.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dcdc82da",
      "metadata": {
        "id": "dcdc82da",
        "outputId": "c318c216-e710-4cd1-ca6e-f8e9be86511f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Store_Size\n",
              "Medium    2284\n",
              "Small     1790\n",
              "High       916\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.Store_Size.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d67fef3",
      "metadata": {
        "id": "0d67fef3",
        "outputId": "b09f9d65-4557-4270-b985-f82cb0407318"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Store_Size\n",
              "Medium    1686\n",
              "Small     1314\n",
              "High       532\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_df.Store_Size.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6ba2f53a",
      "metadata": {
        "id": "6ba2f53a",
        "outputId": "5c8d2c4d-8a52-4bcf-d8ea-4daf4488cbcc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Store_Location_Type\n",
              "Cluster 3    1940\n",
              "Cluster 2    1581\n",
              "Cluster 1    1469\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.Store_Location_Type.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "63fff967",
      "metadata": {
        "id": "63fff967",
        "outputId": "7fe5b3e1-e45b-40b2-fac1-700441aa6fac"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Store_Type\n",
              "Supermarket Type1    3304\n",
              "Grocery Store         724\n",
              "Supermarket Type2     500\n",
              "Supermarket Type3     462\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.Store_Type.value_counts()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **checking for outliers**"
      ],
      "metadata": {
        "id": "NeucPk80YeJR"
      },
      "id": "NeucPk80YeJR"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bec66826",
      "metadata": {
        "id": "bec66826"
      },
      "outputs": [],
      "source": [
        "def Box_plots(free):\n",
        "    plt.figure(figsize=(10, 4))\n",
        "    plt.title('Box Plot')\n",
        "    sns.boxplot(free)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c0d829f4",
      "metadata": {
        "id": "c0d829f4",
        "outputId": "d1d06545-3977-48ff-bb70-d7553c3261d4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Box_plots(train_df['Item_Weight'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c388e9f6",
      "metadata": {
        "id": "c388e9f6",
        "outputId": "cb5e18f4-50a7-47b9-b3f3-8e2a2245f4ca"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Box_plots(train_df['Item_Visibility'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "36ed430d",
      "metadata": {
        "id": "36ed430d",
        "outputId": "fb4ea7cc-3086-4250-ba29-a078467d8b41"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Box_plots(train_df['Item_Price'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1990cca7",
      "metadata": {
        "id": "1990cca7",
        "outputId": "3b9d7c62-c840-47b7-e069-bbfd9e0ac6e0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Box_plots(train_df['Store_Start_Year'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "40dff641",
      "metadata": {
        "id": "40dff641",
        "outputId": "3b11ff3d-e2de-4095-9f7c-7960c707a979"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Box_plots(train_df['Item_Store_Returns'])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **fill missing values**"
      ],
      "metadata": {
        "id": "HtyolRLHYwgD"
      },
      "id": "HtyolRLHYwgD"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b4e2fa1a",
      "metadata": {
        "id": "b4e2fa1a",
        "outputId": "9685b862-d813-46a7-d3b6-cd733b87bc44"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "12.6"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.Item_Weight.median()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "db7fd01e",
      "metadata": {
        "id": "db7fd01e"
      },
      "outputs": [],
      "source": [
        "train_df['Item_Weight'] = train_df.Item_Weight.fillna(train_df.Item_Weight.median())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3bf1f77d",
      "metadata": {
        "id": "3bf1f77d"
      },
      "outputs": [],
      "source": [
        "test_df['Item_Weight'] = test_df.Item_Weight.fillna(train_df.Item_Weight.median())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "950d7274",
      "metadata": {
        "id": "950d7274"
      },
      "outputs": [],
      "source": [
        "train_df['Store_Size'] = train_df.Store_Size.fillna(method=\"bfill\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6a7b8b74",
      "metadata": {
        "id": "6a7b8b74"
      },
      "outputs": [],
      "source": [
        "test_df['Store_Size'] = test_df.Store_Size.fillna(method=\"bfill\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **import preprocessing and data modelling packages**"
      ],
      "metadata": {
        "id": "-Z8a-fCAZAvs"
      },
      "id": "-Z8a-fCAZAvs"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d69f7068",
      "metadata": {
        "id": "d69f7068"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import RobustScaler, QuantileTransformer, PowerTransformer, Normalizer, FunctionTransformer, StandardScaler, OneHotEncoder, LabelEncoder, OrdinalEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_squared_error"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ed775b5f",
      "metadata": {
        "id": "ed775b5f",
        "outputId": "7d423085-adaa-430d-cd37-08429a43e75e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['Item_ID', 'Store_ID', 'Item_Store_ID', 'Item_Weight',\n",
              "       'Item_Sugar_Content', 'Item_Visibility', 'Item_Type', 'Item_Price',\n",
              "       'Store_Start_Year', 'Store_Size', 'Store_Location_Type', 'Store_Type',\n",
              "       'Item_Store_Returns'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fac22bc8",
      "metadata": {
        "id": "fac22bc8"
      },
      "outputs": [],
      "source": [
        "X = train_df.drop(['Item_ID', 'Store_ID', 'Item_Store_ID', 'Item_Store_Returns'], axis=1)\n",
        "y = train_df['Item_Store_Returns']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "abc14e61",
      "metadata": {
        "id": "abc14e61",
        "outputId": "d5f6e8a1-abc6-4378-a2ff-3025b19cdc71"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(4990, 9)"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "52aee0ba",
      "metadata": {
        "id": "52aee0ba",
        "outputId": "f6d3beb6-2459-4fc7-bf47-3706145604f0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(4990,)"
            ]
          },
          "execution_count": 34,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "979fca8f",
      "metadata": {
        "id": "979fca8f"
      },
      "outputs": [],
      "source": [
        "test_df_1 = test_df.drop(['Item_ID', 'Store_ID', 'Item_Store_ID'], axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0beb3801",
      "metadata": {
        "id": "0beb3801"
      },
      "outputs": [],
      "source": [
        "num_features = ['Item_Weight', 'Item_Visibility', 'Item_Price', 'Store_Start_Year']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "039683a6",
      "metadata": {
        "id": "039683a6"
      },
      "outputs": [],
      "source": [
        "ohe_features = ['Item_Sugar_Content', 'Store_Size', 'Store_Location_Type', 'Store_Type']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0bfef101",
      "metadata": {
        "id": "0bfef101"
      },
      "outputs": [],
      "source": [
        "ord_features = ['Item_Type']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f3e418e8",
      "metadata": {
        "id": "f3e418e8"
      },
      "outputs": [],
      "source": [
        "ord_features_1 = ['Item_Sugar_Content', 'Item_Type', 'Store_Size', 'Store_Location_Type', 'Store_Type']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **create a pipeline for training and testing**"
      ],
      "metadata": {
        "id": "ZaVwp7vZZt7A"
      },
      "id": "ZaVwp7vZZt7A"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f22f53f7",
      "metadata": {
        "id": "f22f53f7"
      },
      "outputs": [],
      "source": [
        "preprocessor = ColumnTransformer(transformers=[\n",
        "    ('ord_encode', OrdinalEncoder(), ord_features_1),\n",
        "    #('ohe_encode', OneHotEncoder(drop='first'), ohe_features),\n",
        "    ('std_scale', StandardScaler(), num_features),\n",
        "    (\"qt_scale\", QuantileTransformer(), num_features),\n",
        "    ('pt', PowerTransformer(), num_features)],\n",
        "                                 remainder='passthrough')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **split data into train and test set**"
      ],
      "metadata": {
        "id": "JBni1aFJZ8mH"
      },
      "id": "JBni1aFJZ8mH"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "776a2802",
      "metadata": {
        "id": "776a2802"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **instantiate model and pipeline**"
      ],
      "metadata": {
        "id": "36gYzkJgaHGn"
      },
      "id": "36gYzkJgaHGn"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0a68ab9e",
      "metadata": {
        "id": "0a68ab9e"
      },
      "outputs": [],
      "source": [
        "linreg = LinearRegression(n_jobs=-1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4aecc254",
      "metadata": {
        "id": "4aecc254"
      },
      "outputs": [],
      "source": [
        "pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                           ('lr_model', linreg)])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **fit model**"
      ],
      "metadata": {
        "id": "hiEoslFaaWcF"
      },
      "id": "hiEoslFaaWcF"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7593a34e",
      "metadata": {
        "id": "7593a34e",
        "outputId": "9d3d549a-4f5e-4dae-c9bf-7e77f58ed069"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\ACER\\anaconda3\\Lib\\site-packages\\numpy\\core\\_methods.py:239: RuntimeWarning: overflow encountered in multiply\n",
            "  x = um.multiply(x, x, out=x)\n",
            "C:\\Users\\ACER\\anaconda3\\Lib\\site-packages\\numpy\\core\\_methods.py:250: RuntimeWarning: overflow encountered in reduce\n",
            "  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;ord_encode&#x27;,\n",
              "                                                  OrdinalEncoder(),\n",
              "                                                  [&#x27;Item_Sugar_Content&#x27;,\n",
              "                                                   &#x27;Item_Type&#x27;, &#x27;Store_Size&#x27;,\n",
              "                                                   &#x27;Store_Location_Type&#x27;,\n",
              "                                                   &#x27;Store_Type&#x27;]),\n",
              "                                                 (&#x27;std_scale&#x27;, StandardScaler(),\n",
              "                                                  [&#x27;Item_Weight&#x27;,\n",
              "                                                   &#x27;Item_Visibility&#x27;,\n",
              "                                                   &#x27;Item_Price&#x27;,\n",
              "                                                   &#x27;Store_Start_Year&#x27;]),\n",
              "                                                 (&#x27;qt_scale&#x27;,\n",
              "                                                  QuantileTransformer(),\n",
              "                                                  [&#x27;Item_Weight&#x27;,\n",
              "                                                   &#x27;Item_Visibility&#x27;,\n",
              "                                                   &#x27;Item_Price&#x27;,\n",
              "                                                   &#x27;Store_Start_Year&#x27;]),\n",
              "                                                 (&#x27;pt&#x27;, PowerTransformer(),\n",
              "                                                  [&#x27;Item_Weight&#x27;,\n",
              "                                                   &#x27;Item_Visibility&#x27;,\n",
              "                                                   &#x27;Item_Price&#x27;,\n",
              "                                                   &#x27;Store_Start_Year&#x27;])])),\n",
              "                (&#x27;lr_model&#x27;, LinearRegression(n_jobs=-1))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                                   transformers=[(&#x27;ord_encode&#x27;,\n",
              "                                                  OrdinalEncoder(),\n",
              "                                                  [&#x27;Item_Sugar_Content&#x27;,\n",
              "                                                   &#x27;Item_Type&#x27;, &#x27;Store_Size&#x27;,\n",
              "                                                   &#x27;Store_Location_Type&#x27;,\n",
              "                                                   &#x27;Store_Type&#x27;]),\n",
              "                                                 (&#x27;std_scale&#x27;, StandardScaler(),\n",
              "                                                  [&#x27;Item_Weight&#x27;,\n",
              "                                                   &#x27;Item_Visibility&#x27;,\n",
              "                                                   &#x27;Item_Price&#x27;,\n",
              "                                                   &#x27;Store_Start_Year&#x27;]),\n",
              "                                                 (&#x27;qt_scale&#x27;,\n",
              "                                                  QuantileTransformer(),\n",
              "                                                  [&#x27;Item_Weight&#x27;,\n",
              "                                                   &#x27;Item_Visibility&#x27;,\n",
              "                                                   &#x27;Item_Price&#x27;,\n",
              "                                                   &#x27;Store_Start_Year&#x27;]),\n",
              "                                                 (&#x27;pt&#x27;, PowerTransformer(),\n",
              "                                                  [&#x27;Item_Weight&#x27;,\n",
              "                                                   &#x27;Item_Visibility&#x27;,\n",
              "                                                   &#x27;Item_Price&#x27;,\n",
              "                                                   &#x27;Store_Start_Year&#x27;])])),\n",
              "                (&#x27;lr_model&#x27;, LinearRegression(n_jobs=-1))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n",
              "                  transformers=[(&#x27;ord_encode&#x27;, OrdinalEncoder(),\n",
              "                                 [&#x27;Item_Sugar_Content&#x27;, &#x27;Item_Type&#x27;,\n",
              "                                  &#x27;Store_Size&#x27;, &#x27;Store_Location_Type&#x27;,\n",
              "                                  &#x27;Store_Type&#x27;]),\n",
              "                                (&#x27;std_scale&#x27;, StandardScaler(),\n",
              "                                 [&#x27;Item_Weight&#x27;, &#x27;Item_Visibility&#x27;,\n",
              "                                  &#x27;Item_Price&#x27;, &#x27;Store_Start_Year&#x27;]),\n",
              "                                (&#x27;qt_scale&#x27;, QuantileTransformer(),\n",
              "                                 [&#x27;Item_Weight&#x27;, &#x27;Item_Visibility&#x27;,\n",
              "                                  &#x27;Item_Price&#x27;, &#x27;Store_Start_Year&#x27;]),\n",
              "                                (&#x27;pt&#x27;, PowerTransformer(),\n",
              "                                 [&#x27;Item_Weight&#x27;, &#x27;Item_Visibility&#x27;,\n",
              "                                  &#x27;Item_Price&#x27;, &#x27;Store_Start_Year&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ord_encode</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Item_Sugar_Content&#x27;, &#x27;Item_Type&#x27;, &#x27;Store_Size&#x27;, &#x27;Store_Location_Type&#x27;, &#x27;Store_Type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">std_scale</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Item_Weight&#x27;, &#x27;Item_Visibility&#x27;, &#x27;Item_Price&#x27;, &#x27;Store_Start_Year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">qt_scale</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Item_Weight&#x27;, &#x27;Item_Visibility&#x27;, &#x27;Item_Price&#x27;, &#x27;Store_Start_Year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">QuantileTransformer</label><div class=\"sk-toggleable__content\"><pre>QuantileTransformer()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pt</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Item_Weight&#x27;, &#x27;Item_Visibility&#x27;, &#x27;Item_Price&#x27;, &#x27;Store_Start_Year&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PowerTransformer</label><div class=\"sk-toggleable__content\"><pre>PowerTransformer()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression(n_jobs=-1)</pre></div></div></div></div></div></div></div>"
            ],
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(remainder='passthrough',\n",
              "                                   transformers=[('ord_encode',\n",
              "                                                  OrdinalEncoder(),\n",
              "                                                  ['Item_Sugar_Content',\n",
              "                                                   'Item_Type', 'Store_Size',\n",
              "                                                   'Store_Location_Type',\n",
              "                                                   'Store_Type']),\n",
              "                                                 ('std_scale', StandardScaler(),\n",
              "                                                  ['Item_Weight',\n",
              "                                                   'Item_Visibility',\n",
              "                                                   'Item_Price',\n",
              "                                                   'Store_Start_Year']),\n",
              "                                                 ('qt_scale',\n",
              "                                                  QuantileTransformer(),\n",
              "                                                  ['Item_Weight',\n",
              "                                                   'Item_Visibility',\n",
              "                                                   'Item_Price',\n",
              "                                                   'Store_Start_Year']),\n",
              "                                                 ('pt', PowerTransformer(),\n",
              "                                                  ['Item_Weight',\n",
              "                                                   'Item_Visibility',\n",
              "                                                   'Item_Price',\n",
              "                                                   'Store_Start_Year'])])),\n",
              "                ('lr_model', LinearRegression(n_jobs=-1))])"
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pipeline.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **evaluate model**"
      ],
      "metadata": {
        "id": "pYGv2vAzagUx"
      },
      "id": "pYGv2vAzagUx"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d71cde12",
      "metadata": {
        "id": "d71cde12",
        "outputId": "5d6a13e7-e8db-41f9-8ea4-d1981f71792a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE: 3104.548633\n"
          ]
        }
      ],
      "source": [
        "y_pred = pipeline.predict(X_test)\n",
        "\n",
        "print('RMSE: {:.6f}'.format(mean_squared_error(y_test, y_pred, squared=False)))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **predict test set**"
      ],
      "metadata": {
        "id": "8aFl2WM5amMg"
      },
      "id": "8aFl2WM5amMg"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8ba51911",
      "metadata": {
        "id": "8ba51911"
      },
      "outputs": [],
      "source": [
        "test_df_pred = pipeline.predict(test_df_1)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **generate submission**"
      ],
      "metadata": {
        "id": "DH7uI2Bzav8j"
      },
      "id": "DH7uI2Bzav8j"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "49c4545a",
      "metadata": {
        "id": "49c4545a",
        "outputId": "de49f613-ba75-40a1-bb82-c46fa87bdc7d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item_Store_ID</th>\n",
              "      <th>Item_Store_Returns</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>DRA59_BABATUNJI010</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>DRA59_BABATUNJI013</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DRB01_BABATUNJI013</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>DRB13_BABATUNJI010</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>DRB13_BABATUNJI013</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        Item_Store_ID  Item_Store_Returns\n",
              "0  DRA59_BABATUNJI010                 100\n",
              "1  DRA59_BABATUNJI013                 100\n",
              "2  DRB01_BABATUNJI013                 100\n",
              "3  DRB13_BABATUNJI010                 100\n",
              "4  DRB13_BABATUNJI013                 100"
            ]
          },
          "execution_count": 54,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ss_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2f401439",
      "metadata": {
        "id": "2f401439"
      },
      "outputs": [],
      "source": [
        "result = pd.DataFrame({'Item_Store_ID':ss_df.Item_Store_ID, 'Item_Store_Returns':test_df_pred})\n",
        "result.to_csv(\"linreg_baseline_model.csv\", index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f2f25d33",
      "metadata": {
        "id": "f2f25d33"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.5"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}